openapi: 3.1.0
info:
  title: Plant Database API with Photo Logging
  description: |
    A comprehensive plant database API for managing garden plants with full CRUD operations PLUS new plant health logging with photo storage.
    
    ## Plant Management Features:
    - **Add/Update/Search plants** with comprehensive care information
    - **17 plant fields** including care instructions, growing conditions, and photos
    
    ## ðŸ†• Plant Health Logging Features:
    - **AI photo analysis** with automatic diagnosis and treatment recommendations
    - **Manual log entries** for tracking plant health over time
    - **Log history** with timeline view and pattern analysis
    - **Log search** across all plants by symptoms, treatments, dates
    
    ## Pagination for Large Datasets:
    - **GET /api/plants**: Returns 20 plants per page by default. Check `has_more` field and use `pagination_info` for guidance on getting more plants.
    - **GET /api/plants/all**: Returns ALL plants without pagination. Use when you need the complete dataset.
    - **Parameters**: Use `offset` and `limit` for custom pagination, or `q` for searching.
    
    ## For ChatGPT: 
    When there are more than 20 plants, the API will provide clear instructions in the `pagination_info` field on how to get additional plants.
  version: 2.0.0

servers:
  - url: https://plant-database-api-production.up.railway.app
    description: Production server

paths:
  # =============================================
  # EXISTING PLANT MANAGEMENT OPERATIONS
  # =============================================
  
  /api/plants:
    get:
      operationId: searchPlants
      summary: Search or list all plants
      description: Search for plants by name, description, or location. Returns paginated results.
      security: []
      parameters:
        - name: q
          in: query
          description: Search query to find plants by name, description, or location
          required: false
          schema:
            type: string
            example: "tomato"
        - name: limit
          in: query
          description: Maximum number of plants to return (default 20)
          required: false
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: Number of plants to skip for pagination (default 0)
          required: false
          schema:
            type: integer
            default: 0
      responses:
        '200':
          description: Paginated list of plants
          content:
            application/json:
              schema:
                type: object
                properties:
                  plants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plant'
                  total:
                    type: integer
                    description: Total number of plants in database
                  count:
                    type: integer
                    description: Number of plants in this response
                  offset:
                    type: integer
                    description: Number of plants skipped
                  limit:
                    type: integer
                    description: Maximum plants per page
                  has_more:
                    type: boolean
                    description: True if more plants are available
                  remaining:
                    type: integer
                    description: Number of additional plants available
                  pagination_info:
                    type: object
                    description: Guidance for getting more plants (when has_more is true)
                    properties:
                      message:
                        type: string
                      next_page_instruction:
                        type: string
                      get_all_instruction:
                        type: string

    post:
      operationId: addPlant
      summary: Add a new plant to the database
      description: Add a new plant. Only plant_name is required.
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlantInput'
            examples:
              minimal:
                summary: Minimal plant addition
                value:
                  plant_name: "Basil"
                  location: "Herb Garden"
              comprehensive:
                summary: Comprehensive plant addition
                value:
                  plant_name: "Japanese Maple"
                  description: "Beautiful ornamental tree"
                  location: "Front Yard"
                  light_requirements: "Partial Shade to Full Sun"
                  frost_tolerance: "Hardy to -15Â°C"
                  watering_needs: "Regular watering"
                  soil_preferences: "Well-draining soil"
                  pruning_instructions: "Prune in late winter"
                  mulching_needs: "3-inch layer of mulch"
                  fertilizing_schedule: "Feed in early spring"
                  winterizing_instructions: "Protect from harsh winds"
                  spacing_requirements: "Plant 6-8 feet apart"
                  care_notes: "Avoid wet feet"
                  photo_url: "https://example.com/maple.jpg"
      responses:
        '201':
          description: Plant added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/plants/all:
    get:
      operationId: getAllPlants
      summary: Get ALL plants without pagination
      description: Retrieve all plants in the database without pagination limits. Use this when you need the complete dataset. For large databases, this may return substantial data.
      security: []
      parameters:
        - name: q
          in: query
          description: Optional search query to filter all results
          required: false
          schema:
            type: string
            example: "tomato"
      responses:
        '200':
          description: Complete list of all plants
          content:
            application/json:
              schema:
                type: object
                properties:
                  plants:
                    type: array
                    items:
                      $ref: '#/components/schemas/Plant'
                    description: All plants in database
                  total:
                    type: integer
                    description: Total number of plants
                  count:
                    type: integer
                    description: Number of plants returned (same as total)
                  warning:
                    type: string
                    description: Warning about large data size
                  pagination_alternative:
                    type: string
                    description: Suggestion to use paginated endpoint for large datasets

  /api/plants/{id_or_name}:
    get:
      operationId: getPlant
      summary: Get a specific plant
      description: Retrieve details for a specific plant by ID or name.
      security: []
      parameters:
        - name: id_or_name
          in: path
          required: true
          description: Plant ID or exact plant name
          schema:
            type: string
            example: "Tomato"
      responses:
        '200':
          description: Plant details
          content:
            application/json:
              schema:
                type: object
                properties:
                  plant:
                    $ref: '#/components/schemas/Plant'
        '404':
          description: Plant not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    put:
      operationId: updatePlant
      summary: Update an existing plant
      description: Update specific fields of an existing plant. All fields are optional.
      security:
        - ApiKeyAuth: []
      parameters:
        - name: id_or_name
          in: path
          required: true
          description: Plant ID or exact plant name to update
          schema:
            type: string
            example: "Tomato"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlantUpdate'
            examples:
              care_update:
                summary: Update care instructions
                value:
                  watering_needs: "Water deeply twice per week"
                  care_notes: "Mulch heavily during summer heat"
      responses:
        '200':
          description: Plant updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # =============================================
  # NEW PLANT LOGGING OPERATIONS
  # =============================================

  /api/analyze-plant:
    post:
      operationId: analyzeAndLogPlant
      summary: Analyze plant photo and automatically create log entry
      description: |
        Upload a plant photo for AI analysis and automatically save the results 
        as a plant log entry. This combines image analysis with persistent logging.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - file
              properties:
                file:
                  type: string
                  format: binary
                  description: Plant photo to analyze (JPG, PNG, WebP, GIF)
                plant_name:
                  type: string
                  description: Name of the plant (optional - will link to existing plant if found)
                  example: "Tomato Plant #1"
                user_notes:
                  type: string
                  description: Additional user observations or notes
                  example: "Noticed yellowing leaves yesterday"
                analysis_type:
                  type: string
                  enum: [health_assessment, identification, general_care, follow_up]
                  default: health_assessment
                  description: Type of analysis being requested
      responses:
        '200':
          description: Analysis complete and log entry created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  analysis:
                    type: object
                    properties:
                      diagnosis:
                        type: string
                        description: Plant health diagnosis
                      treatment:
                        type: string
                        description: Recommended treatment plan
                      confidence:
                        type: number
                        description: Analysis confidence score (0-1)
                  log_entry:
                    type: object
                    properties:
                      log_id:
                        type: string
                        description: Unique identifier for the log entry
                      plant_name:
                        type: string
                        description: Plant name used for the log entry
                      photo_url:
                        type: string
                        description: Public URL of the uploaded photo
                      stored:
                        type: boolean
                        description: Whether the log entry was successfully saved
                  plant_suggestions:
                    type: object
                    properties:
                      link_to_existing:
                        type: array
                        items:
                          type: string
                        description: Existing plants that might match
                      create_new_plant:
                        type: boolean
                        description: Option to create new plant record
      security:
        - ApiKeyAuth: []

  /api/plants/log:
    post:
      operationId: createPlantLog
      summary: Create manual plant log entry with optional photo
      description: |
        Create a plant log entry manually. Useful for follow-up entries or 
        when you want to add notes without AI analysis.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - plant_name
              properties:
                plant_name:
                  type: string
                  description: Name of the plant (must exist in database)
                  example: "Tomato Plant #1"
                file:
                  type: string
                  format: binary
                  description: Optional plant photo
                log_title:
                  type: string
                  description: Title for this log entry
                  example: "Weekly health check"
                user_notes:
                  type: string
                  description: Observations and notes
                diagnosis:
                  type: string
                  description: Plant health assessment
                treatment:
                  type: string
                  description: Treatment or care recommendations
                follow_up_required:
                  type: boolean
                  description: Whether follow-up is needed
                follow_up_date:
                  type: string
                  format: date
                  description: When to check again (YYYY-MM-DD)
      responses:
        '200':
          description: Log entry created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  log_id:
                    type: string
                  message:
                    type: string
      security:
        - ApiKeyAuth: []

  /api/plants/{plant_name}/log:
    get:
      operationId: getPlantLogHistory
      summary: Get log history for a specific plant
      description: Retrieve all log entries for a plant in chronological order
      parameters:
        - name: plant_name
          in: path
          required: true
          schema:
            type: string
          description: Name of the plant
          example: "Tomato Plant #1"
        - name: format
          in: query
          schema:
            type: string
            enum: [standard, journal]
            default: standard
          description: Response format (standard JSON or human-readable journal)
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
          description: Maximum number of entries to return
      responses:
        '200':
          description: Plant log history retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  plant_name:
                    type: string
                  plant_id:
                    type: string
                  total_entries:
                    type: integer
                  log_entries:
                    type: array
                    items:
                      $ref: '#/components/schemas/PlantLogEntry'

  /api/plants/log/search:
    get:
      operationId: searchPlantLogs
      summary: Search across all plant logs
      description: Search plant logs by various criteria
      parameters:
        - name: plant_name
          in: query
          schema:
            type: string
          description: Filter by specific plant name
        - name: q
          in: query
          schema:
            type: string
          description: General search term (searches diagnosis, symptoms, notes)
        - name: symptoms
          in: query
          schema:
            type: string
          description: Search by symptoms (comma-separated)
          example: "yellowing,wilting"
        - name: date_from
          in: query
          schema:
            type: string
            format: date
          description: Start date for date range search (YYYY-MM-DD)
        - name: date_to
          in: query
          schema:
            type: string
            format: date
          description: End date for date range search (YYYY-MM-DD)
        - name: format
          in: query
          schema:
            type: string
            enum: [standard, journal]
            default: standard
          description: Response format
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_matches:
                    type: integer
                  search_query:
                    type: string
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        log_id:
                          type: string
                        plant_name:
                          type: string
                        log_date:
                          type: string
                        matched_content:
                          type: string
                        photo_url:
                          type: string
                        relevance_score:
                          type: number

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
      description: API key required for write operations

  schemas:
    Plant:
      type: object
      properties:
        id:
          type: string
          description: Unique plant identifier
          example: "1"
        plant_name:
          type: string
          description: Name of the plant
          example: "Tomato"
        description:
          type: string
          description: Plant description
          example: "Classic garden vegetable"
        location:
          type: string
          description: Location in garden (comma-separated for multiple)
          example: "Vegetable Garden, Greenhouse"
        light_requirements:
          type: string
          description: Sunlight needs
          example: "Full Sun"
        frost_tolerance:
          type: string
          description: Cold hardiness information
          example: "Not frost tolerant"
        watering_needs:
          type: string
          description: Watering frequency and requirements
          example: "Regular watering, keep soil moist"
        soil_preferences:
          type: string
          description: Soil type and pH requirements
          example: "Well-draining, rich soil"
        pruning_instructions:
          type: string
          description: When and how to prune
          example: "Remove suckers, prune lower leaves"
        mulching_needs:
          type: string
          description: Mulching recommendations
          example: "2-3 inch layer around base"
        fertilizing_schedule:
          type: string
          description: Fertilization timing and type
          example: "Every 2-3 weeks during growing season"
        winterizing_instructions:
          type: string
          description: Winter care instructions
          example: "Harvest before first frost"
        spacing_requirements:
          type: string
          description: Plant spacing recommendations
          example: "18-24 inches apart"
        care_notes:
          type: string
          description: Additional care information
          example: "Support with stakes or cages"
        photo_url:
          type: string
          description: Image URL (stored as IMAGE formula)
          example: "=IMAGE(\"https://example.com/tomato.jpg\")"
        raw_photo_url:
          type: string
          description: Direct image URL
          example: "https://example.com/tomato.jpg"
        last_updated:
          type: string
          description: Timestamp of last update
          example: "2024-01-15 10:30:45"

    PlantInput:
      type: object
      required:
        - plant_name
      properties:
        plant_name:
          type: string
          description: "Name of the plant (REQUIRED)"
          example: "Basil"
        description:
          type: string
          description: "Plant description"
          example: "Aromatic herb perfect for cooking"
        location:
          type: string
          description: "Location in garden"
          example: "Herb Garden"
        light_requirements:
          type: string
          description: "Sunlight needs"
          example: "Full Sun to Partial Shade"
        frost_tolerance:
          type: string
          description: "Cold hardiness information"
          example: "Hardy to -10Â°C"
        watering_needs:
          type: string
          description: "Watering requirements"
          example: "Keep soil consistently moist"
        soil_preferences:
          type: string
          description: "Soil requirements"
          example: "Well-draining, fertile soil"
        pruning_instructions:
          type: string
          description: "Pruning guidance"
          example: "Pinch flowers to encourage leaf growth"
        mulching_needs:
          type: string
          description: "Mulching recommendations"
          example: "Light mulch to retain moisture"
        fertilizing_schedule:
          type: string
          description: "Fertilization plan"
          example: "Light fertilizer monthly"
        winterizing_instructions:
          type: string
          description: "Winter care instructions"
          example: "Bring indoors or treat as annual"
        spacing_requirements:
          type: string
          description: "Spacing needs"
          example: "12 inches apart"
        care_notes:
          type: string
          description: "Additional care tips"
          example: "Harvest regularly to prevent flowering"
        photo_url:
          type: string
          description: "Image URL"
          example: "https://example.com/basil.jpg"

    PlantUpdate:
      type: object
      description: "Partial update object - all fields are optional"
      properties:
        plant_name:
          type: string
          description: "Name of the plant"
        description:
          type: string
          description: "Plant description"
        location:
          type: string
          description: "Location in garden"
        light_requirements:
          type: string
          description: "Sunlight needs"
        frost_tolerance:
          type: string
          description: "Cold hardiness information"
        watering_needs:
          type: string
          description: "Watering requirements"
        soil_preferences:
          type: string
          description: "Soil requirements"
        pruning_instructions:
          type: string
          description: "Pruning guidance"
        mulching_needs:
          type: string
          description: "Mulching recommendations"
        fertilizing_schedule:
          type: string
          description: "Fertilization plan"
        winterizing_instructions:
          type: string
          description: "Winter care instructions"
        spacing_requirements:
          type: string
          description: "Spacing needs"
        care_notes:
          type: string
          description: "Additional care tips"
        photo_url:
          type: string
          description: "Image URL"

    PlantLogEntry:
      type: object
      properties:
        log_id:
          type: string
          description: Unique identifier for the log entry
          example: "LOG-20240115-001"
        plant_name:
          type: string
          description: Name of the plant
          example: "Tomato Plant #1"
        plant_id:
          type: string
          description: Reference to plant ID in main database
          example: "1"
        log_date:
          type: string
          description: Human-readable log date
          example: "January 15, 2024 at 2:30 PM"
        log_title:
          type: string
          description: Title for the log entry
          example: "Weekly health check"
        photo_url:
          type: string
          description: Photo URL (IMAGE formula)
          example: "=IMAGE(\"https://storage.googleapis.com/bucket/photo.jpg\")"
        raw_photo_url:
          type: string
          description: Direct image link
          example: "https://storage.googleapis.com/bucket/photo.jpg"
        diagnosis:
          type: string
          description: Plant health assessment
          example: "Nitrogen deficiency based on yellowing pattern"
        treatment_recommendation:
          type: string
          description: Recommended treatment plan
          example: "Apply nitrogen-rich fertilizer and increase watering"
        symptoms_observed:
          type: string
          description: Combined user and AI observations
          example: "Yellowing leaves, starting from bottom, slow growth"
        user_notes:
          type: string
          description: User observations and comments
          example: "Plant has been in this condition for about a week"
        confidence_score:
          type: number
          description: AI confidence level (0.0-1.0)
          example: 0.85
        analysis_type:
          type: string
          enum: [health_assessment, identification, general_care, follow_up]
          description: Type of analysis performed
          example: "health_assessment"
        follow_up_required:
          type: boolean
          description: Whether follow-up is needed
          example: true
        follow_up_date:
          type: string
          format: date
          description: When to check again
          example: "2024-01-22"
        last_updated:
          type: string
          description: Timestamp of last update
          example: "2024-01-15 14:30:45"

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message 
          example: "Plant name is required" 