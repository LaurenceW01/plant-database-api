openapi: 3.1.0
info:
  title: Plant Database API - Core Operations
  description: |
    Essential plant database operations with AI-powered analysis and location intelligence.
    Streamlined to 30 operations for ChatGPT compatibility.
  version: 2.4.1
servers:
  - url: https://dev-plant-database-api.onrender.com
    description: Development server

paths:
  # =============================================
  # CORE PLANT MANAGEMENT (5 operations)
  # =============================================
  
  /api/plants/search:
    get:
      operationId: searchPlants
      summary: Search or list plants
      description: Search for plants by name, description, or location
      security: []
      parameters:
        - name: q
          in: query
          description: Search query to find plants
          required: false
          schema:
            type: string
            example: "tomato"
        - name: limit
          in: query
          description: Maximum number of plants to return (default 20)
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of plants matching search criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  plants:
                    type: array
                    items:
                      type: object
                      properties:
                        Plant Name:
                          type: string
                        Description:
                          type: string
                        Location:
                          type: string
                  total:
                    type: integer
                  count:
                    type: integer

  /api/plants/add:
    post:
      operationId: addPlant
      summary: Add a new plant
      description: Add a new plant to the database with photo upload token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Plant Name
              properties:
                Plant Name:
                  type: string
                  description: Name of the plant (required)
                  example: "Basil"
                Description:
                  type: string
                  example: "Sweet basil for cooking"
                Location:
                  type: string
                  example: "Herb Garden"
                Light Requirements:
                  type: string
                  example: "Full Sun"
                Watering Needs:
                  type: string
                  example: "Water daily"
                Care Notes:
                  type: string
                  example: "Harvest regularly"
      responses:
        '201':
          description: Plant added successfully with upload token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  plant_id:
                    type: string
                  upload_url:
                    type: string
                  upload_instructions:
                    type: string

  /api/plants/get/{id}:
    get:
      operationId: getPlant
      summary: Get plant by ID or name
      description: Retrieve specific plant information
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Plant ID or name
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: Plant details
          content:
            application/json:
              schema:
                type: object
                properties:
                  plant:
                    type: object
                    properties:
                      Plant Name:
                        type: string
                      Description:
                        type: string
                      Location:
                        type: string

  /api/plants/update/{id}:
    put:
      operationId: updatePlant
      summary: Update plant information
      description: Update existing plant with new information
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Plant ID or name
          schema:
            type: string
      requestBody:
        required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                Description:
                    type: string
                Location:
                    type: string
                Watering Needs:
                    type: string
                Care Notes:
            type: string
      responses:
        '200':
          description: Plant updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
            type: string
                  upload_url:
                type: string

  /api/plants/update:
    put:
      operationId: updatePlantFlexible
      summary: Update plant with ID in body (ChatGPT-friendly)
      description: Alternative update endpoint that accepts plant ID in request body instead of URL path
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - id
              properties:
                id:
                  type: string
                  description: Plant ID or name to update
                  example: "Vinca"
                Description:
                    type: string
                Location:
                    type: string
                Watering Needs:
                    type: string
                Care Notes:
                        type: string
                Light Requirements:
                        type: string
                Soil Preferences:
                        type: string
      responses:
        '200':
          description: Plant updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  endpoint_type:
                    type: string
                  note:
                    type: string

  /api/plants/get-context/{plant_id}:
    get:
      operationId: getPlantContext
      summary: Get plant context with location intelligence
      description: Get comprehensive location and container context for a plant
      security: []
      parameters:
        - name: plant_id
          in: path
          required: true
          description: Plant ID
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: Plant context with location and container details
          content:
            application/json:
              schema:
                type: object
                properties:
                  plant_id:
                    type: string
                  contexts:
                    type: array
                    items:
                    type: object
                    properties:
                        container:
                    type: object
                        location:
                    type: object
                        context:
                type: object

  # =============================================
  # AI-POWERED ANALYSIS (2 operations)
  # =============================================
  
  /api/plants/diagnose:
    post:
      operationId: diagnosePlant
      summary: AI-powered plant diagnosis
      description: Get AI-powered plant health diagnosis with location intelligence
      security: []
      requestBody:
        required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                plant_name:
                    type: string
                  description: Name of the plant
                  example: "Rose"
                user_notes:
            type: string
                  description: Observations about the plant
                  example: "Plant has yellow leaves and brown spots"
                location:
                  type: string
                  description: Plant location for context
                  example: "Garden bed 2"
                analysis_type:
                  type: string
                  default: "general_care"
      responses:
        '200':
          description: AI diagnosis with recommendations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  analysis:
                    type: object
                    properties:
                      plant_name:
                    type: string
                      ai_analysis:
                        type: string
                      enhanced_with_location:
                        type: boolean

  /api/plants/enhance-analysis:
    post:
      operationId: enhanceAnalysis
      summary: Enhance plant analysis with database knowledge
      description: Enhance existing analysis with location and database context
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - plant_identification
              properties:
                gpt_analysis:
                  type: string
                  description: Your image analysis text
                  example: "This tomato plant shows yellowing leaves..."
                plant_identification:
                  type: string  
                  description: Plant name you identified
                  example: "Tomato Plant"
                user_question:
                  type: string
                  description: User's question if any
                location:
                  type: string
                  description: Plant location
                analysis_type:
                  type: string
                  default: "health_assessment"
      responses:
        '200':
          description: Enhanced analysis with database knowledge
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  enhanced_analysis:
                    type: object
                    properties:
                      plant_match:
                    type: object
                      care_enhancement:
                    type: object
                      diagnosis_enhancement:
                    type: object

  # =============================================
  # HEALTH LOGGING (3 operations)
  # =============================================

  /api/logs/create:
    post:
      operationId: createLog
      summary: Create plant health log entry
      description: Create a comprehensive plant health log entry with photo upload token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Plant Name
              properties:
                Plant Name:
                  type: string
                  description: Name of the plant (required)
                  example: "Tomato Plant #1"
                Log Title:
                  type: string
                  example: "Weekly Health Check"
                Diagnosis:
                  type: string
                  example: "Minor nitrogen deficiency"
                Treatment:
                  type: string
                  example: "Apply balanced fertilizer"
                Symptoms:
                  type: string
                  example: "Yellow leaf edges"
                User Notes:
                  type: string
                  example: "Plant seems otherwise healthy"
                Follow-up Required:
                  type: boolean
                  default: false
                Follow-up Date:
                  type: string
                  format: date
                  example: "2024-01-22"
      responses:
        '201':
          description: Log entry created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  log_id:
                    type: string
                  upload_url:
                    type: string
                  upload_instructions:
                    type: string

  /api/logs/create-simple:
    post:
      operationId: createSimpleLog
      summary: Create simple plant log entry
      description: Create a simple plant log entry with basic information
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - Plant Name
              properties:
                Plant Name:
                  type: string
                  description: Name of the plant (required)
                User Notes:
                  type: string
                  description: Simple notes about the plant
                  example: "Plant looks healthy today"
      responses:
        '201':
          description: Simple log entry created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  log_id:
                    type: string
                  upload_url:
                    type: string

  /api/logs/search:
    get:
      operationId: searchLogs
      summary: Search plant health logs
      description: Search for log entries by plant name or content
      security: []
      parameters:
        - name: q
          in: query
          description: Search query for logs
          required: false
          schema:
            type: string
            example: "tomato"
        - name: plant_name
          in: query
          description: Filter by specific plant name
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of logs to return
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of matching log entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  search_results:
                    type: array
                    items:
                      type: object
                      properties:
                        log_id:
                          type: string
                        plant_name:
                          type: string
                        log_date:
                          type: string
                        diagnosis:
                          type: string
                  total_results:
                    type: integer

  # =============================================
  # PHOTO UPLOAD (2 operations)
  # =============================================

  /api/photos/upload-for-plant/{token}:
    post:
      operationId: uploadPhotoForPlant
      summary: Upload photo for plant using token
      description: Upload a photo for a plant using a secure token
      security: []
      parameters:
        - name: token
          in: path
          required: true
          description: Upload token from plant creation/update
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
          schema:
              type: object
              properties:
                file:
            type: string
                  format: binary
                  description: Image file to upload
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                          type: string
                        photo_url:
                          type: string

  /api/photos/upload-for-log/{token}:
    post:
      operationId: uploadPhotoForLog
      summary: Upload photo for log entry using token
      description: Upload a photo for a log entry using a secure token
      security: []
      parameters:
        - name: token
          in: path
          required: true
          description: Upload token from log creation
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: Image file to upload
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  photo_url:
                    type: string

  # =============================================
  # LOCATION INTELLIGENCE (8 operations)
  # =============================================

  /api/locations/get-context/{id}:
    get:
      operationId: getLocationContext
      summary: Get location context
      description: Get detailed context for a specific location
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Location ID
          schema:
            type: string
      responses:
        '200':
          description: Location context details
          content:
            application/json:
              schema:
                type: object
                properties:
                  location_id:
            type: string
                  location_name:
                    type: string
                  care_profile:
                type: object

  /api/garden/get-metadata:
    get:
      operationId: getGardenMetadata
      summary: Get garden metadata
      description: Get comprehensive garden metadata and statistics
      security: []
      responses:
        '200':
          description: Garden metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_locations:
                    type: integer
                  total_containers:
                    type: integer
                  unique_plants:
                    type: integer

  /api/garden/optimize-care:
    get:
      operationId: optimizeGardenCare
      summary: Get care optimization suggestions
      description: Get proactive care optimization recommendations
      security: []
      responses:
        '200':
          description: Care optimization suggestions
          content:
            application/json:
              schema:
                type: object
                properties:
                  optimization_analysis:
                    type: object
                  total_opportunities:
                    type: integer

  /api/plants/{plant_id}/location-context:
    get:
      operationId: getPlantLocationContext
      summary: Get plant location context (legacy)
      description: Legacy endpoint for plant location context
      security: []
      parameters:
        - name: plant_id
          in: path
          required: true
          description: Plant ID
          schema:
            type: string
      responses:
        '200':
          description: Plant location context
          content:
            application/json:
              schema:
                type: object
                properties:
                  plant_id:
                    type: string
                  contexts:
                    type: array

  /api/locations/{location_id}/care-profile:
    get:
      operationId: getLocationCareProfile
      summary: Get location care profile
      description: Get comprehensive care analysis for a location
      security: []
      parameters:
        - name: location_id
          in: path
          required: true
          description: Location ID
          schema:
            type: string
      responses:
        '200':
          description: Location care profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  location_id:
                    type: string
                  care_profile:
                    type: object

  /api/locations/all:
    get:
      operationId: getAllLocations
      summary: Get all locations
      description: Get all locations with metadata
      security: []
      responses:
        '200':
          description: All locations
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                  total:
                    type: integer

  /api/garden/metadata/enhanced:
    get:
      operationId: getEnhancedMetadata
      summary: Get enhanced garden metadata
      description: Get comprehensive garden metadata with location + container intelligence
      security: []
      responses:
        '200':
          description: Enhanced garden metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  enhanced_metadata:
                          type: object
                  api_version:
                    type: string

  /api/garden/care-optimization:
    get:
      operationId: getCareOptimization
      summary: Get care optimization analysis
      description: Get location and container-based care optimization suggestions
      security: []
      responses:
        '200':
          description: Care optimization analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  optimization_analysis:
                          type: object
                  total_opportunities:
                    type: integer

  # =============================================
  # WEATHER INTEGRATION (3 operations)
  # =============================================

  /api/weather/current:
    get:
      operationId: getCurrentWeather
      summary: Get current weather conditions
      description: Get current weather data for Houston area
      security: []
      responses:
        '200':
          description: Current weather information
          content:
            application/json:
              schema:
                type: object
                properties:
                  temperature:
                    type: number
                    description: Temperature in Fahrenheit
                  humidity:
                    type: integer
                    description: Humidity percentage
                  wind_speed:
                    type: number
                    description: Wind speed in MPH
                  description:
                    type: string
                  precipitation_chance:
                    type: integer

  /api/weather/forecast:
    get:
      operationId: getWeatherForecast
      summary: Get hourly weather forecast
      description: Get hourly weather forecast data
      security: []
      parameters:
        - name: hours
          in: query
          description: Number of hours to forecast (default 24, max 72)
          required: false
          schema:
            type: integer
            default: 24
            maximum: 72
      responses:
        '200':
          description: Hourly weather forecast
          content:
            application/json:
              schema:
                type: object
                properties:
                  forecast:
                    type: array
                    items:
                      type: object
                      properties:
                        time:
                          type: string
                        temperature:
                          type: number
                        description:
                          type: string
                        precipitation_chance:
                          type: integer

  /api/weather/forecast/daily:
    get:
      operationId: getDailyWeatherForecast
      summary: Get daily weather forecast
      description: Get daily weather forecast for up to 7 days
      security: []
      parameters:
        - name: days
          in: query
          description: Number of days to forecast (default 7, max 7)
          required: false
          schema:
            type: integer
            default: 7
            maximum: 7
      responses:
        '200':
          description: Daily weather forecast
          content:
            application/json:
              schema:
                type: object
                properties:
                  forecast:
                    type: array
                    items:
                      type: object
                      properties:
                        date:
                          type: string
                          format: date
                        high_temp:
                          type: number
                        low_temp:
                          type: number
                        precipitation_chance:
                          type: integer
                        description:
                          type: string

components:
  schemas:
    Plant:
      type: object
      properties:
        Plant Name:
          type: string
        Description:
          type: string
        Location:
          type: string
        Light Requirements:
          type: string
        Watering Needs:
          type: string
        Care Notes:
          type: string

    LogEntry:
      type: object
      properties:
        Plant Name:
          type: string
        Log Title:
          type: string
        Diagnosis:
          type: string
        Treatment:
          type: string
        Symptoms:
          type: string
        User Notes:
          type: string

    WeatherData:
      type: object
      properties:
        temperature:
          type: number
        humidity:
          type: integer
        wind_speed:
          type: number
        description:
          type: string
        precipitation_chance:
          type: integer