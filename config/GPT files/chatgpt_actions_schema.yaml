openapi: 3.1.0
info:
  title: Plant Database API - Core Operations
  description: |
    Essential plant database operations with AI-powered analysis and location intelligence.
    Streamlined to 30 operations for ChatGPT compatibility.
  version: 2.4.5
servers:
  - url: https://dev-plant-database-api.onrender.com
    description: Development server

paths:
  # =============================================
  # CORE PLANT MANAGEMENT (5 operations)
  # =============================================
  
  /api/plants/search:
    get:
      operationId: searchPlants
      summary: "Search plants"
      description: "CHATGPT WORKAROUND: Search for plants by name, description, or location (converted to GET due to ChatGPT POST issue). Use names_only=true to get just plant names for AI analysis (e.g., toxicity reports)."
      security: []
      parameters:
        - name: q
          in: query
          required: false
          schema:
            type: string
          description: "Search query to find plants"
          example: "vinca"
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            default: 20
          description: "Maximum number of plants to return"
          example: 5
        - name: names_only
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "If true, returns only plant names as strings instead of full plant objects. Perfect for AI analysis tasks like toxicity reports."
          example: true
      responses:
        '200':
          description: "Plants found matching search query"
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 2
                  plants:
                    type: array
                    items:
                      oneOf:
                        - type: object
                          description: "Full plant data (when names_only=false)"
                        - type: string
                          description: "Plant name only (when names_only=true)"
                  names_only:
                    type: boolean
                    description: "Indicates if response contains names only"
                  usage_note:
                    type: string
                    description: "Guidance for using the response data"
                  note:
                    type: string
                    description: "Context about the search results"
              examples:
                full_search:
                  summary: "Full plant data: GET /api/plants/search"
                  value:
                    count: 2
                    plants: [{"id": "31", "plant_name": "Trailing Vinca"}, {"id": "134", "plant_name": "Vinca"}]
                names_only_all:
                  summary: "All plant names: GET /api/plants/search"
                  value:
                    count: 150
                    plants: ["Basil", "Tomato", "Rose", "Vinca"]
                    names_only: true
                    usage_note: "Use these names with other plant endpoints for detailed information"
                    note: "All plant names in database"
                names_only_search:
                  summary: "Names matching search: GET /api/plants/search"
                  value:
                    count: 2
                    plants: ["Trailing Vinca", "Vinca"]
                    names_only: true
                    search_query: "vinca"
                    usage_note: "Use these names with other plant endpoints for detailed information"
                    note: "Plant names matching \"vinca\""

  /api/plants/add:
    get:
      operationId: addPlant
      summary: Add a new plant
      description: "CHATGPT WORKAROUND: Add a new plant (converted to GET due to ChatGPT POST issue)"
      security: []
      parameters:
        - name: plant_name
          in: query
          required: true
          schema:
            type: string
          description: "Name of the plant to add"
        - name: location
          in: query
          required: false
          schema:
            type: string
          description: "Location where plant is planted"
      responses:
        '201':
          description: Plant added successfully with upload token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  plant_id:
                    type: string
                  upload_url:
                    type: string
                  upload_instructions:
                    type: string

  /api/plants/get/{id}:
    get:
      operationId: getPlant
      summary: Get plant by ID or name
      description: Retrieve specific plant information
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Plant ID or name
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: Plant details
          content:
            application/json:
              schema:
                type: object
                properties:
                  plant:
                    type: object
                    properties:
                      plant_name:
                        type: string
                      description:
                        type: string
                      location:
                        type: string
                      light_requirements:
                        type: string
                      watering_needs:
                        type: string
                      id:
                        type: string

  /api/plants/get-all-fields/{id}:
    get:
      operationId: getPlantAllFields
      summary: Get all plant fields by ID or name
      description: Retrieve ALL available fields from the plant spreadsheet for a specific plant. Returns complete plant data including all configured fields.
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Plant ID or name to retrieve all fields for
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: Complete plant data with all fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  plant:
                    type: object
                    description: Complete plant object with all spreadsheet fields
                    properties:
                      id:
                        type: string
                      plant_name:
                        type: string
                      description:
                        type: string
                      location:
                        type: string
                      light_requirements:
                        type: string
                      watering_needs:
                        type: string
                      soil_preferences:
                        type: string
                      soil_ph_type:
                        type: string
                      soil_ph_range:
                        type: string
                      frost_tolerance:
                        type: string
                      fertilizing_schedule:
                        type: string
                      pruning_instructions:
                        type: string
                      mulching_needs:
                        type: string
                      winterizing_instructions:
                        type: string
                      spacing_requirements:
                        type: string
                      care_notes:
                        type: string
                      photo_url:
                        type: string
                      raw_photo_url:
                        type: string
                      last_updated:
                        type: string
                    additionalProperties: true
                  metadata:
                    type: object
                    properties:
                      query:
                        type: string
                        description: Original query (ID or name)
                      plant_id:
                        type: string
                        description: Plant ID from database
                      plant_name:
                        type: string
                        description: Plant name from database
                      total_fields:
                        type: integer
                        description: Total number of fields returned
                      non_empty_fields:
                        type: integer
                        description: Number of fields with values
                      field_names:
                        type: array
                        items:
                          type: string
                        description: List of all field names
                  endpoint_type:
                    type: string
                    example: "get_all_fields"
                  note:
                    type: string
                    example: "All available plant fields from spreadsheet"
        '404':
          description: Plant not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  error:
                    type: string
                  message:
                    type: string
                  query:
                    type: string
                  endpoint_type:
                    type: string

  /api/plants/update/{id}:
    get:
      operationId: updatePlant
      summary: Update plant information
      description: "CHATGPT WORKAROUND: Update existing plant with new information (converted to GET due to ChatGPT PUT issue)"
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Plant ID or name
          schema:
            type: string
        - name: description
          in: query
          required: false
          schema:
            type: string
          description: "Plant description"
        - name: location
          in: query
          required: false
          schema:
            type: string
          description: "Plant location"
        - name: light_requirements
          in: query
          required: false
          schema:
            type: string
          description: "Light requirements for the plant"
        - name: watering_needs
          in: query
          required: false
          schema:
            type: string
          description: "Watering needs for the plant"
        - name: soil_preferences
          in: query
          required: false
          schema:
            type: string
          description: "Soil preferences for the plant"
        - name: frost_tolerance
          in: query
          required: false
          schema:
            type: string
          description: "Frost tolerance information"
        - name: fertilizing_schedule
          in: query
          required: false
          schema:
            type: string
          description: "Fertilizing schedule"
        - name: pruning_instructions
          in: query
          required: false
          schema:
            type: string
          description: "Pruning instructions"
        - name: mulching_needs
          in: query
          required: false
          schema:
            type: string
          description: "Mulching needs"
        - name: winterizing_instructions
          in: query
          required: false
          schema:
            type: string
          description: "Winterizing instructions"
        - name: care_notes
          in: query
          required: false
          schema:
            type: string
          description: "Additional care notes"
      responses:
        '200':
          description: Plant updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  upload_url:
                    type: string

  /api/plants/update:
    get:
      operationId: updatePlantFlexible
      summary: Update plant with ID in query (ChatGPT-friendly)
      description: "CHATGPT WORKAROUND: Alternative update endpoint that accepts plant ID in query parameters (converted to GET due to ChatGPT PUT issue)"
      security: []
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
          description: "Plant ID or name to update"
          example: "Vinca"
        - name: description
          in: query
          required: false
          schema:
            type: string
          description: "Plant description"
        - name: location
          in: query
          required: false
          schema:
            type: string
          description: "Plant location"
        - name: light_requirements
          in: query
          required: false
          schema:
            type: string
          description: "Light requirements for the plant"
        - name: watering_needs
          in: query
          required: false
          schema:
            type: string
          description: "Watering needs for the plant"
        - name: soil_preferences
          in: query
          required: false
          schema:
            type: string
          description: "Soil preferences for the plant"
        - name: frost_tolerance
          in: query
          required: false
          schema:
            type: string
          description: "Frost tolerance information"
        - name: fertilizing_schedule
          in: query
          required: false
          schema:
            type: string
          description: "Fertilizing schedule"
        - name: pruning_instructions
          in: query
          required: false
          schema:
            type: string
          description: "Pruning instructions"
        - name: mulching_needs
          in: query
          required: false
          schema:
            type: string
          description: "Mulching needs"
        - name: winterizing_instructions
          in: query
          required: false
          schema:
            type: string
          description: "Winterizing instructions"
        - name: care_notes
          in: query
          required: false
          schema:
            type: string
          description: "Additional care notes"
      responses:
        '200':
          description: Plant updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  endpoint_type:
                    type: string
                  note:
                    type: string

  /api/plants/get-context/{plant_id}:
    get:
      operationId: getPlantContext
      summary: Get plant context with location intelligence  
      description: Get comprehensive location and container context for a plant
      security: []
      parameters:
        - name: plant_id
          in: path
          required: true
          description: Plant ID or plant name (e.g., "1" or "Vinca")
          schema:
            type: string
            example: "1"
      responses:
        '200':
          description: Plant context with location and container details
          content:
            application/json:
              schema:
                type: object
                properties:
                  plant_id:
                    type: string
                  contexts:
                    type: array
                    items:
                      type: object
                      properties:
                        container:
                          type: object
                        location:
                          type: object
                        context:
                          type: object

  /api/plants/by-location/{location_name}:
    get:
      operationId: getPlantsByLocation
      summary: Get plants by location
      description: Get all plants in a specific location (supports both location IDs and location names)
      security: []
      parameters:
        - name: location_name
          in: path
          required: true
          description: Location name or location ID (e.g., "arboretum" or "middle" or "23")
          schema:
            type: string
            example: "arboretum"
      responses:
        '200':
          description: List of plants in the specified location
          content:
            application/json:
              schema:
                type: object
                properties:
                  location_identifier:
                    type: string
                  resolved_location_name:
                    type: string
                  count:
                    type: integer
                  plants:
                    type: array
                    items:
                      type: object
                      properties:
                        plant_name:
                          type: string
                        location:
                          type: string
                        description:
                          type: string

  # =============================================
  # AI-POWERED ANALYSIS (2 operations)
  # =============================================

  /api/plants/diagnose:
    get:
      operationId: diagnosePlant
      summary: AI-powered plant diagnosis
      description: "CHATGPT WORKAROUND: Get AI-powered plant health diagnosis with location intelligence (converted to GET due to ChatGPT POST issue)"
      security: []
      parameters:
        - name: plant_name
          in: query
          required: true
          schema:
            type: string
          description: "Name of the plant"
          example: "Rose"
        - name: user_notes
          in: query
          required: false
          schema:
            type: string
          description: "Observations about the plant"
          example: "Plant has yellow leaves and brown spots"
        - name: location
          in: query
          required: false
          schema:
            type: string
          description: "Plant location for context"
          example: "Garden bed 2"
        - name: analysis_type
          in: query
          required: false
          schema:
            type: string
            default: "general_care"
          description: "Type of analysis to perform"
      responses:
        '200':
          description: AI diagnosis with recommendations
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  analysis:
                    type: object
                    properties:
                      plant_name:
                        type: string
                      ai_analysis:
                        type: string
                      enhanced_with_location:
                        type: boolean

  /api/plants/enhance-analysis:
    get:
      operationId: enhanceAnalysis
      summary: Enhance plant analysis with database knowledge
      description: "CHATGPT WORKAROUND: Enhance existing analysis with location and database context (converted to GET due to ChatGPT POST issue)"
      security: []
      parameters:
        - name: plant_identification
          in: query
          required: true
          schema:
            type: string
          description: "Plant name you identified"
          example: "Tomato Plant"
        - name: gpt_analysis
          in: query
          required: false
          schema:
            type: string
          description: "Your image analysis text"
          example: "This tomato plant shows yellowing leaves..."
        - name: user_question
          in: query
          required: false
          schema:
            type: string
          description: "User's question if any"
        - name: location
          in: query
          required: false
          schema:
            type: string
          description: "Plant location"
        - name: analysis_type
          in: query
          required: false
          schema:
            type: string
            default: "health_assessment"
          description: "Type of analysis to perform"
      responses:
        '200':
          description: Enhanced analysis with database knowledge
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  enhanced_analysis:
                    type: object
                    properties:
                      plant_match:
                        type: object
                      care_enhancement:
                        type: object
                      diagnosis_enhancement:
                        type: object

  # =============================================
  # HEALTH LOGGING (3 operations)
  # =============================================

  /api/logs/create:
    get:
      operationId: createLog
      summary: Create plant health log entry
      description: "CHATGPT WORKAROUND: Create a comprehensive plant health log entry with photo upload token (converted to GET due to ChatGPT POST issue)"
      security: []
      parameters:
        - name: plant_name
          in: query
          required: true
          schema:
            type: string
          description: "Name of the plant (required)"
          example: "Tomato Plant #1"
        - name: log_title
          in: query
          required: false
          schema:
            type: string
          description: "Title for the log entry"
          example: "Weekly Health Check"
        - name: diagnosis
          in: query
          required: false
          schema:
            type: string
          description: "Plant diagnosis"
          example: "Minor nitrogen deficiency"
        - name: treatment
          in: query
          required: false
          schema:
            type: string
          description: "Treatment applied"
          example: "Apply balanced fertilizer"
        - name: symptoms
          in: query
          required: false
          schema:
            type: string
          description: "Observed symptoms"
          example: "Yellow leaf edges"
        - name: user_notes
          in: query
          required: false
          schema:
            type: string
          description: "Additional notes"
          example: "Plant seems otherwise healthy"
        - name: follow_up_required
          in: query
          required: false
          schema:
            type: boolean
            default: false
          description: "Whether follow-up is required"
        - name: follow_up_date
          in: query
          required: false
          schema:
            type: string
          description: "Follow-up date (YYYY-MM-DD format)"
          example: "2024-01-22"
      responses:
        '201':
          description: Log entry created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  log_id:
                    type: string
                  upload_url:
                    type: string
                  upload_instructions:
                    type: string

  /api/logs/create-simple:
    get:
      operationId: createSimpleLog
      summary: Create simple plant log entry
      description: "CHATGPT WORKAROUND: Create a simple plant log entry with basic information (converted to GET due to ChatGPT POST issue)"
      security: []
      parameters:
        - name: plant_name
          in: query
          required: true
          schema:
            type: string
          description: "Name of the plant (required)"
        - name: user_notes
          in: query
          required: false
          schema:
            type: string
          description: "Simple notes about the plant"
          example: "Plant looks healthy today"
      responses:
        '201':
          description: Simple log entry created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  log_id:
                    type: string
                  upload_url:
                    type: string

  /api/logs/search:
    get:
      operationId: searchLogs
      summary: Search plant health logs
      description: Search for log entries by plant name or content
      security: []
      parameters:
        - name: q
          in: query
          description: Search query for logs
          required: false
          schema:
            type: string
            example: "tomato"
        - name: plant_name
          in: query
          description: Filter by specific plant name
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: Maximum number of logs to return
          required: false
          schema:
            type: integer
            default: 20
      responses:
        '200':
          description: List of matching log entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  search_results:
                    type: array
                    items:
                      type: object
                      properties:
                        log_id:
                          type: string
                        plant_name:
                          type: string
                        log_date:
                          type: string
                        diagnosis:
                          type: string
                  total_results:
                    type: integer

  # =============================================
  # PHOTO UPLOAD (2 operations)
  # =============================================

  /api/photos/upload-for-plant/{token}:
    get:
      operationId: uploadPhotoForPlant
      summary: Get upload instructions for plant photo
      description: "CHATGPT WORKAROUND: Get photo upload instructions (converted to GET due to ChatGPT POST file upload limitation). ChatGPT cannot upload files directly."
      security: []
      parameters:
        - name: token
          in: path
          required: true
          description: Upload token from plant creation/update
          schema:
            type: string
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  photo_url:
                    type: string

  /api/photos/upload-for-log/{token}:
    get:
      operationId: uploadPhotoForLog
      summary: Get upload instructions for log photo
      description: "CHATGPT WORKAROUND: Get photo upload instructions for log entry (converted to GET due to ChatGPT POST file upload limitation). ChatGPT cannot upload files directly."
      security: []
      parameters:
        - name: token
          in: path
          required: true
          description: Upload token from log creation
          schema:
            type: string
      responses:
        '200':
          description: Photo uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  photo_url:
                    type: string

  # =============================================
  # LOCATION INTELLIGENCE (8 operations)
  # =============================================

  /api/locations/get-context/{id}:
    get:
      operationId: getLocationContext
      summary: Get location context
      description: Get detailed context for a specific location (supports both location IDs and location names)
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Location ID or location name (e.g., "1" or "middle" or "front patio")
          schema:
            type: string
      responses:
        '200':
          description: Location context details
          content:
            application/json:
              schema:
                type: object
                properties:
                  location_id:
                    type: string
                  location_name:
                    type: string
                  care_profile:
                    type: object

  /api/garden/get-metadata:
    get:
      operationId: getGardenMetadata
      summary: Get garden metadata
      description: Get comprehensive garden metadata and statistics
      security: []
      responses:
        '200':
          description: Garden metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_locations:
                    type: integer
                  total_containers:
                    type: integer
                  unique_plants:
                    type: integer

  /api/garden/optimize-care:
    get:
      operationId: optimizeGardenCare
      summary: Get care optimization suggestions
      description: Get proactive care optimization recommendations
      security: []
      responses:
        '200':
          description: Care optimization suggestions
          content:
            application/json:
              schema:
                type: object
                properties:
                  optimization_analysis:
                    type: object
                  total_opportunities:
                    type: integer

  /api/plants/{plant_id}/location-context:
    get:
      operationId: getPlantLocationContext
      summary: Get plant location context (legacy)
      description: Legacy endpoint for plant location context
      security: []
      parameters:
        - name: plant_id
          in: path
          required: true
          description: Plant ID
          schema:
            type: string
      responses:
        '200':
          description: Plant location context
          content:
            application/json:
              schema:
                type: object
                properties:
                  plant_id:
                    type: string
                  contexts:
                    type: array

  /api/locations/{location_id}/care-profile:
    get:
      operationId: getLocationCareProfile
      summary: Get location care profile
      description: Get comprehensive care analysis for a location (supports both location IDs and location names)
      security: []
      parameters:
        - name: location_id
          in: path
          required: true
          description: Location ID or location name (e.g., "1" or "middle" or "front patio")
          schema:
            type: string
      responses:
        '200':
          description: Location care profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  location_id:
                    type: string
                  care_profile:
                    type: object

  /api/locations/all:
    get:
      operationId: getAllLocations
      summary: Get all locations
      description: Get all locations with metadata
      security: []
      responses:
        '200':
          description: All locations
          content:
            application/json:
              schema:
                type: object
                properties:
                  locations:
                    type: array
                  total:
                    type: integer

  /api/garden/metadata/enhanced:
    get:
      operationId: getEnhancedMetadata
      summary: Get enhanced garden metadata
      description: Get comprehensive garden metadata with location + container intelligence
      security: []
      responses:
        '200':
          description: Enhanced garden metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  enhanced_metadata:
                    type: object
                  api_version:
                    type: string

  /api/garden/care-optimization:
    get:
      operationId: getCareOptimization
      summary: Get care optimization analysis
      description: Get location and container-based care optimization suggestions with detailed usage distribution and efficiency insights
      security: []
      responses:
        '200':
          description: Care optimization analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  optimization_analysis:
                    type: object
                    properties:
                      location_efficiency:
                        type: object
                        properties:
                          empty_locations:
                            type: array
                            items:
                              type: string
                          light_usage_locations:
                            type: array
                            items:
                              type: string
                          moderate_usage_locations:
                            type: array
                            items:
                              type: string
                          heavy_usage_locations:
                            type: array
                            items:
                              type: string
                          underutilized_prime_locations:
                            type: array
                            items:
                              type: string
                          usage_distribution:
                            type: object
                            properties:
                              empty:
                                type: integer
                              light:
                                type: integer
                              moderate:
                                type: integer
                              heavy:
                                type: integer
                      care_complexity_summary:
                        type: object
                      container_insights:
                        type: object
                        properties:
                          total_containers:
                            type: integer
                          material_distribution:
                            type: object
                          size_distribution:
                            type: object
                  total_opportunities:
                    type: integer
                  priority_improvements:
                    type: array
                    items:
                      type: object
                  efficiency_score:
                    type: object
                    properties:
                      score:
                        type: number
                      description:
                        type: string
                  recommendations:
                    type: array
                    items:
                      type: string
                  generated_at:
                    type: string
                  api_version:
                    type: string

  # =============================================
  # ADVANCED QUERY SYSTEM (1 operation)
  # =============================================

  /api/garden/filter:
    get:
      operationId: filterGarden
      summary: "Filter garden plants (GET method - reliable)"
      description: "🌈 RELIABLE: GET-based filtering like other working endpoints. Use query parameters for advanced plant filtering."
      security: []
      parameters:
        - name: location
          in: query
          required: false
          schema:
            type: string
          description: "Location name to filter (e.g., 'patio', 'garden')"
        - name: container_size
          in: query
          required: false
          schema:
            type: string
          description: "Container size (e.g., 'small', 'medium', 'large')"
        - name: container_material
          in: query
          required: false
          schema:
            type: string
          description: "Container material (e.g., 'ceramic', 'plastic', 'terracotta')"
        - name: plant_name
          in: query
          required: false
          schema:
            type: string
          description: "Plant name to filter"
      responses:
        '200':
          description: "Filtered plants list"
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    description: "Number of plants found"
                  total_matches:
                    type: integer
                    description: "Total matching records"
                  plants:
                    type: array
                    description: "Plants with hierarchical location structure"
                    items:
                      type: object
                      properties:
                        plant_name:
                          type: string
                          description: "Name of the plant"
                        plant_id:
                          type: string
                          description: "Plant identifier"
                        locations:
                          type: array
                          description: "All locations where this plant exists"
                          items:
                            type: object
                            properties:
                              location_name:
                                type: string
                                description: "Resolved location name"
                              location_id:
                                type: string
                                description: "Location identifier"
                              containers:
                                type: array
                                description: "Containers in this location"
                                items:
                                  type: object
                                  properties:
                                    container_id:
                                      type: string
                                    container_type:
                                      type: string
                                    container_size:
                                      type: string
                                    container_material:
                                      type: string
                  debug_signature:
                    type: string
                    description: "GET-FILTER-HIERARCHICAL-v2.4.0"
                  filters_applied:
                    type: object
                    description: "Summary of applied filters"

  # =============================================
  # TESTING ENDPOINTS (1 operation)
  # =============================================

  /api/test/simple-post:
    post:
      operationId: testSimplePost
      summary: "Test POST request capability"
      description: "Ultra-simple POST endpoint for testing GPT's ability to send POST requests. Accepts any JSON."
      security: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                test_message:
                  type: string
                  description: "Optional test message"
              additionalProperties: true
      responses:
        '200':
          description: "POST test successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "success"
                  message:
                    type: string
                    description: "Confirmation message"
                  timestamp:
                    type: string
                    description: "Response timestamp"
                  received_data:
                    type: object
                    description: "Data that was received"
                  test_type:
                    type: string
                    description: "simple_post_test"
                  version:
                    type: string
                    description: "API version"

  /api/test/simple-put:
    put:
      operationId: testSimplePut
      summary: "Test PUT request capability"
      description: "Ultra-simple PUT endpoint for testing GPT's ability to send PUT requests. Accepts any JSON."
      security: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                test_message:
                  type: string
                  description: "Optional test message"
              additionalProperties: true
      responses:
        '200':
          description: "PUT test successful"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: "success"
                  message:
                    type: string
                    description: "PUT request received successfully"
                  timestamp:
                    type: string
                    description: "Response timestamp"
                  received_data:
                    type: object
                    description: "Data that was received"
                  test_type:
                    type: string
                    description: "simple_put_test"
                  method:
                    type: string
                    description: "PUT"
                  version:
                    type: string
                    description: "API version"

  # =============================================
  # WEATHER INTEGRATION (3 operations)
  # =============================================

  /api/weather/current:
    get:
      operationId: getCurrentWeather
      summary: Get current weather conditions
      description: Get current weather data for Houston area
      security: []
      responses:
        '200':
          description: Current weather information

  /api/weather/forecast:
    get:
      operationId: getWeatherForecast
      summary: Get hourly weather forecast
      description: Get hourly weather forecast data
      security: []
      parameters:
        - name: hours
          in: query
          description: Number of hours to forecast (default 24, max 72)
          required: false
          schema:
            type: integer
            default: 24
            maximum: 72
      responses:
        '200':
          description: Hourly weather forecast

  /api/weather/forecast/daily:
    get:
      operationId: getDailyWeatherForecast
      summary: Get daily weather forecast
      description: Get daily weather forecast for up to 7 days
      security: []
      parameters:
        - name: days
          in: query
          description: Number of days to forecast (default 7, max 7)
          required: false
          schema:
            type: integer
            default: 7
            maximum: 7
      responses:
        '200':
          description: Daily weather forecast

components:
  schemas:
    Plant:
      type: object
      properties:
        plant_name:
          type: string
        description:
          type: string
        location:
          type: string
        light_requirements:
          type: string
        watering_needs:
          type: string
        soil_preferences:
          type: string
        soil_ph_type:
          type: string
          description: "Soil pH type (high alkalinity, medium alkalinity, slightly alkaline, neutral, slightly acidic, medium acidity, high acidity)"
        soil_ph_range:
          type: string
          description: "Soil pH range in numerical format like '5.5 - 6.5' or '6.0 - 7.0'"
        frost_tolerance:
          type: string
        fertilizing_schedule:
          type: string
        pruning_instructions:
          type: string
        mulching_needs:
          type: string
        winterizing_instructions:
          type: string
        spacing_requirements:
          type: string
        care_notes:
          type: string
        photo_url:
          type: string
        raw_photo_url:
          type: string
        last_updated:
          type: string
      additionalProperties: true

    LogEntry:
      type: object
      properties:
        plant_name:
          type: string
        log_title:
          type: string
        diagnosis:
          type: string
        treatment:
          type: string
        symptoms:
          type: string
        user_notes:
          type: string

    WeatherData:
      type: object
      properties:
        temperature:
          type: number
        humidity:
          type: integer
        wind_speed:
          type: number
        description:
          type: string
        precipitation_chance:
          type: integer